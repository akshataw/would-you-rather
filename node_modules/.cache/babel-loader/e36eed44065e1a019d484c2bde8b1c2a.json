{"ast":null,"code":"var _jsxFileName = \"/home/akshata/my-would-you-rather/src/components/Questions.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { handleAnswer } from '../actions/shared';\nimport ErrorPage from './ErrorPage';\n/*class Questions extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      answer: this.props.answer\n    }\n    this.changeOption = this.changeOption.bind(this)\n  }\n\n  changeOption(opt){\n    const { dispatch, auth, question } = this.props\n    if (!this.state.answer) {\n      if (opt === 1) {\n        dispatch(handleAnswer(auth, question.id, 'optionOne'))\n        this.setState({ answer: 'optionOne' })\n      } else if (opt === 2) {\n        dispatch(handleAnswer(auth, question.id, 'optionTwo'))\n        this.setState({ answer: 'optionTwo' })\n      }\n    }\n  }\n\n  render(){\n    const { question, heading } = this.props\n    const { answer } = this.state\n    let classes = []\n    if(answer){\n      if(answer === 'optionOne'){\n        classes = ['opt option-one selected', 'opt option-two']\n      }\n       else if(answer === 'optionTwo'){\n        classes = ['opt option-one', 'opt option-two selected']\n      }\n    }\n    else{\n      classes = ['opt option-one', 'opt option-two']\n    }\n    return (\n      <div>\n      <div>\n       <h2>{this.props.heading}</h2>\n      </div>\n       <div className=\"well\" Style=\"background: #CCD1D1; border: 2px solid #660099; border-radius: 8px;\">\n       <div className=\"media\">\n        <div className=\"media-body\">\n         <div className=\"well well-sm\" Style=\"border: 2px solid black; border-radius: 6px;\">\n          <div className={classes[0]} onClick={() => this.changeOption(1)}>{question.optionOne.text}</div>\n         </div>\n         <div className=\"well well-sm\" Style=\"border: 2px solid black; border-radius: 6px;\">\n          <div className={classes[1]} onClick={() => this.changeOption(2)}>{question.optionTwo.text}</div>\n         </div>\n         </div>\n         <div className=\"media-right\">\n         <Link to={`/questions/${question.id}`}>\n           <button className=\"btn btn-success\" Style=\"margin-top:35px; font-size: 30px; margin-right: 30px; margin-left: 20px; border: 2px solid #1E8449; border-radius: 4px;\">See</button>\n         </Link>\n        </div>\n       </div>\n      </div>\n     </div>\n    )\n  }\n}\n\nfunction mapStateToProps ({ auth }) {\n  return {\n    auth\n  }\n}\n\nexport default connect(mapStateToProps)(Questions);\n*/\n\nvar Questions = function Questions(props) {\n  var question = props.question;\n\n  if (question === null) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"This question does not exist.\");\n  }\n\n  var name = question.name,\n      id = question.id,\n      avatar = question.avatar,\n      optionOne = question.optionOne,\n      optionTwo = question.optionTwo,\n      hasVoted = question.hasVoted;\n\n  if (props.questionsToShow === 'answered' && hasVoted !== true) {\n    return false;\n  } else if (props.questionsToShow === 'unanswered' && hasVoted === true) {\n    return false;\n  }\n\n  var viewPollLink = '';\n\n  if (props.questionsToShow === 'answered') {\n    viewPollLink = \"/question/\".concat(question.id, \"/results\");\n  } else if (props.questionsToShow === 'unanswered') {\n    viewPollLink = \"/question/\".concat(question.id);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"margin-top-10\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-header bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, name, \" asks would you rather...\"), React.createElement(\"div\", {\n    className: \"card-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row justify-content-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-sm-4 border-right center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: avatar,\n    alt: \"Avatar of \".concat(user.name),\n    className: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"col-sm-8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"question-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, optionOne.text, \" \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"OR\"), \" \", optionTwo.text), React.createElement(Link, {\n    to: viewPollLink,\n    className: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-outline-primary reset-vertical-margin \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"View Poll\")))))))));\n};\n\nfunction mapStateToProps(_ref, _ref2) {\n  var login = _ref.login,\n      users = _ref.users,\n      questions = _ref.questions;\n  var id = _ref2.id,\n      questionsToShow = _ref2.questionsToShow;\n  var question = questions[id];\n  return {\n    authedUser: login.loggedInUser.id,\n    question: formatQuestion(question, users[question.author], login.loggedInUser.id),\n    questionsToShow: questionsToShow\n  };\n}\n\nexport default connect(mapStateToProps)(Questions);","map":{"version":3,"sources":["/home/akshata/my-would-you-rather/src/components/Questions.js"],"names":["React","Component","Link","connect","handleAnswer","ErrorPage","Questions","props","question","name","id","avatar","optionOne","optionTwo","hasVoted","questionsToShow","viewPollLink","user","text","mapStateToProps","login","users","questions","authedUser","loggedInUser","formatQuestion","author"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { handleAnswer } from '../actions/shared';\nimport ErrorPage from './ErrorPage';\n\n/*class Questions extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      answer: this.props.answer\n    }\n    this.changeOption = this.changeOption.bind(this)\n  }\n\n  changeOption(opt){\n    const { dispatch, auth, question } = this.props\n    if (!this.state.answer) {\n      if (opt === 1) {\n        dispatch(handleAnswer(auth, question.id, 'optionOne'))\n        this.setState({ answer: 'optionOne' })\n      } else if (opt === 2) {\n        dispatch(handleAnswer(auth, question.id, 'optionTwo'))\n        this.setState({ answer: 'optionTwo' })\n      }\n    }\n  }\n\n  render(){\n    const { question, heading } = this.props\n    const { answer } = this.state\n    let classes = []\n    if(answer){\n      if(answer === 'optionOne'){\n        classes = ['opt option-one selected', 'opt option-two']\n      }\n       else if(answer === 'optionTwo'){\n        classes = ['opt option-one', 'opt option-two selected']\n      }\n    }\n    else{\n      classes = ['opt option-one', 'opt option-two']\n    }\n    return (\n      <div>\n      <div>\n       <h2>{this.props.heading}</h2>\n      </div>\n       <div className=\"well\" Style=\"background: #CCD1D1; border: 2px solid #660099; border-radius: 8px;\">\n       <div className=\"media\">\n        <div className=\"media-body\">\n         <div className=\"well well-sm\" Style=\"border: 2px solid black; border-radius: 6px;\">\n          <div className={classes[0]} onClick={() => this.changeOption(1)}>{question.optionOne.text}</div>\n         </div>\n         <div className=\"well well-sm\" Style=\"border: 2px solid black; border-radius: 6px;\">\n          <div className={classes[1]} onClick={() => this.changeOption(2)}>{question.optionTwo.text}</div>\n         </div>\n         </div>\n         <div className=\"media-right\">\n         <Link to={`/questions/${question.id}`}>\n           <button className=\"btn btn-success\" Style=\"margin-top:35px; font-size: 30px; margin-right: 30px; margin-left: 20px; border: 2px solid #1E8449; border-radius: 4px;\">See</button>\n         </Link>\n        </div>\n       </div>\n      </div>\n     </div>\n    )\n  }\n}\n\nfunction mapStateToProps ({ auth }) {\n  return {\n    auth\n  }\n}\n\nexport default connect(mapStateToProps)(Questions);\n*/\n\n\nconst Questions = (props) => {\n    const {question} = props;\n\n    if (question === null) {\n        return <p>This question does not exist.</p>\n    }\n\n    const {name, id, avatar, optionOne, optionTwo, hasVoted} = question;\n\n    if (props.questionsToShow === 'answered' && hasVoted !== true) {\n        return false;\n    } else if (props.questionsToShow === 'unanswered' && hasVoted === true) {\n        return false;\n    }\n\n    let viewPollLink = '';\n\n    if (props.questionsToShow === 'answered') {\n        viewPollLink = `/question/${question.id}/results`;\n    } else if (props.questionsToShow === 'unanswered') {\n        viewPollLink = `/question/${question.id}`;\n    }\n\n    return (\n        <div className='margin-top-10'>\n            <div className='card'>\n                <div className='card-header bold'>{name} asks would you rather...</div>\n                <div className='card-body'>\n                    <div className='container'>\n                        <div className='row justify-content-center'>\n                            <div className='col-sm-4 border-right center'>\n                                <img src={avatar} alt={`Avatar of ${user.name}`} className='avatar'/>\n                            </div>\n                            <div className='col-sm-8'>\n                                <div className='question-info'>\n                                    <p className='center'>{optionOne.text} <strong>OR</strong> {optionTwo.text}</p>\n                                    <Link to={viewPollLink} className='center'>\n                                        <button\n                                            className='btn btn-outline-primary reset-vertical-margin '>\n                                            View Poll\n                                        </button>\n                                    </Link>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\n\nfunction mapStateToProps({login, users, questions}, {id, questionsToShow}) {\n    const question = questions[id];\n\n    return {\n        authedUser: login.loggedInUser.id,\n        question: formatQuestion(question, users[question.author], login.loggedInUser.id),\n        questionsToShow\n    }\n}\n\nexport default connect(mapStateToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}